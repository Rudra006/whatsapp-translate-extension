{"version":3,"file":"content.js","mappings":";;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://whatsapp-translator-extension/./src/content.js"],"sourcesContent":["console.log('WhatsApp Translator content script is running');\r\n\r\nlet targetLanguage = 'es';\r\n// Create a visible indicator that the script is running\r\nconst indicator = document.createElement('div');\r\nindicator.textContent = 'WhatsApp Translator Active';\r\nindicator.style.position = 'fixed';\r\nindicator.style.top = '10px';\r\nindicator.style.right = '10px';\r\nindicator.style.backgroundColor = 'yellow';\r\nindicator.style.padding = '5px';\r\nindicator.style.zIndex = '9999';\r\ndocument.body.appendChild(indicator);\r\n\r\n// Function to send the text for translation and update the UI with the result\r\nfunction translateMessage(text, messageNode) {\r\n    console.log('Attempting to translate:', text);\r\n  \r\n    // Send the translation request to the background script\r\n    chrome.runtime.sendMessage({ action: 'translate', message: text, targetLanguage: targetLanguage }, function (response) {\r\n      console.log('Received translation response:', response);\r\n  \r\n      if (response && response.translatedText) {\r\n        // Update the message with translated text displayed below the original text\r\n        const originalTextSpan = messageNode.querySelector('span.selectable-text span');\r\n        if (originalTextSpan) {\r\n          // Check if a translated message already exists\r\n          let translatedSpan = messageNode.querySelector('.translated-text');\r\n          if (translatedSpan) {\r\n            translatedSpan.textContent = response.translatedText;\r\n          } else {\r\n            // Create a new span for the translated text and display it below the original message\r\n            translatedSpan = document.createElement('span');\r\n            translatedSpan.className = 'translated-text';\r\n            translatedSpan.style.display = 'block';  // Ensure it is displayed below\r\n            translatedSpan.style.color = 'blue';     // Differentiate the translated text visually\r\n            translatedSpan.style.marginTop = '5px';  // Add some spacing from the original text\r\n  \r\n            originalTextSpan.parentNode.insertBefore(translatedSpan, originalTextSpan.nextSibling);\r\n          }\r\n          translatedSpan.textContent = response.translatedText;\r\n          \r\n          // Store the original text as a data attribute\r\n          translatedSpan.dataset.originalText = text;\r\n        } else {\r\n          console.log('Error: Could not find original text span.');\r\n        }\r\n      } else {\r\n        console.log('Translation failed or no response received.');\r\n      }\r\n    });\r\n  }\r\n\r\n// Function to add the translate button to each message\r\nfunction addTranslateButton(messageNode) {\r\n  console.log('Attempting to add translate button to:', messageNode);\r\n\r\n  // Check if button already exists to avoid duplicates\r\n  if (messageNode.querySelector('.translate-button')) {\r\n    console.log('Translate button already exists for this message.');\r\n    return;\r\n  }\r\n\r\n  const translateButton = document.createElement('button');\r\n  translateButton.textContent = 'Translate';\r\n  translateButton.className = 'translate-button';\r\n  translateButton.style.marginLeft = '5px';\r\n  translateButton.style.padding = '2px 5px';\r\n  translateButton.style.backgroundColor = '#dcf8c6';\r\n  translateButton.style.border = '1px solid #4a4a4a';\r\n  translateButton.style.borderRadius = '3px';\r\n\r\n  translateButton.addEventListener('click', function () {\r\n    console.log('Translate button clicked');\r\n    // Use a more specific selector to target the text content\r\n    const messageText = messageNode.querySelector('div[data-pre-plain-text] span[dir=\"ltr\"]');\r\n\r\n    if (messageText) {\r\n        const translatedSpan = messageNode.querySelector('.translated-text');\r\n        const textToTranslate = translatedSpan ? translatedSpan.dataset.originalText : messageText.textContent.trim();\r\n        console.log('Message text found:', textToTranslate);\r\n        translateMessage(textToTranslate, messageNode);\r\n      } else {\r\n        console.log('Error: No selectable text found in the message.');\r\n      }\r\n    });\r\n\r\n  // Find the appropriate place to insert the button\r\n  const messageContainer = messageNode.querySelector('div.copyable-text');\r\n  if (messageContainer) {\r\n    messageContainer.appendChild(translateButton);\r\n    console.log('Translate button added successfully.');\r\n  } else {\r\n    console.log('Could not find appropriate container for translate button.');\r\n  }\r\n}\r\n\r\n// Function to observe new messages and add the translate button\r\nfunction observeMessages() {\r\n  console.log('Starting to observe DOM changes.');\r\n\r\n  const targetNode = document.querySelector('#main'); // Observe the main chat container\r\n  if (!targetNode) {\r\n    console.log('Main chat container not found. Retrying in 1 second.');\r\n    setTimeout(observeMessages, 1000);\r\n    return;\r\n  }\r\n\r\n  const observer = new MutationObserver((mutations) => {\r\n    mutations.forEach((mutation) => {\r\n      if (mutation.type === 'childList') {\r\n        mutation.addedNodes.forEach((node) => {\r\n          if (node.nodeType === Node.ELEMENT_NODE) {\r\n            // Check for new messages and add translate buttons\r\n            const newMessages = node.querySelectorAll('div.message-in, div.message-out');\r\n            newMessages.forEach(addTranslateButton);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // Observe the main chat container for new message elements\r\n  observer.observe(targetNode, { childList: true, subtree: true });\r\n  console.log('Observer attached to main chat container.');\r\n\r\n  // Process existing messages when the script loads\r\n  processExistingMessages();\r\n}\r\n\r\n// Function to process existing messages and add translate buttons\r\nfunction processExistingMessages() {\r\n  console.log('Processing existing messages.');\r\n  const messages = document.querySelectorAll('div.message-in, div.message-out');\r\n  messages.forEach(addTranslateButton);\r\n}\r\n\r\n// Setup the observer after a slight delay to ensure chat is loaded\r\nsetTimeout(observeMessages, 5000);\r\n\r\n// Listen for messages from the popup (if any)\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n    console.log('Message received in content script:', request);\r\n  \r\n    if (request.action === 'getSelectedText') {\r\n      const selectedText = window.getSelection().toString();\r\n      console.log('Selected text:', selectedText);\r\n      sendResponse({ selectedText: selectedText });\r\n    } else if (request.action === 'setTargetLanguage') {\r\n      targetLanguage = request.language;\r\n      console.log('Target language updated to:', targetLanguage);\r\n      // Save the target language to chrome.storage\r\n      chrome.storage.sync.set({ targetLanguage: targetLanguage }, function() {\r\n        console.log('Language saved to chrome.storage');\r\n      });\r\n    } else if (request.action === 'getTargetLanguage') {\r\n      sendResponse({ targetLanguage: targetLanguage });\r\n    }\r\n  });\r\n  // Load the saved target language when the script starts\r\nchrome.storage.sync.get(['targetLanguage'], function(result) {\r\n    if (result.targetLanguage) {\r\n      targetLanguage = result.targetLanguage;\r\n      console.log('Loaded saved target language:', targetLanguage);\r\n    }\r\n  });"],"names":[],"sourceRoot":""}